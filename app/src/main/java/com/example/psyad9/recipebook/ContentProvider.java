package com.example.psyad9.recipebook;

import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import static com.example.psyad9.recipebook.RecipeContract.*;

//Android Content Provider created using the automatic methods generated by Android Studio
//These all contain three if statements so that the correct table is accessed based on the URI passed to the method
//These are all used throughout the code as the method by which the app interacts with the database
public class ContentProvider extends android.content.ContentProvider {

    private DBHelper dbhelper = null;

    @Override
    public boolean onCreate() {
        dbhelper = new DBHelper(getContext());
        return false;
    }

    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, @Nullable String[] strings, @Nullable String s, @Nullable String[] strings1, @Nullable String s1) {
        if(uri.equals(RECIPE_URI)) {
            return dbhelper.getReadableDatabase().query(DATABASE_RECIPE_NAME, strings, s, strings1, null, null, s1);
        }else if(uri.equals(INGREDIENT_URI)){
            return dbhelper.getReadableDatabase().query(DATABASE_INGREDIENTS_NAME, strings, s, strings1, null, null, s1);
        }else if(uri.equals(RECIPE_INGREDIENTS_URI)){
            return dbhelper.getReadableDatabase().query(DATABASE_RECIPE_INGREDIENTS_NAME, strings, s, strings1, null, null, s1);
        }
        return null;
    }

    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        String type;
        if(uri.getLastPathSegment()==null){
            type = RecipeContract.CONTENT_TYPE_MULTIPLE;
        }
        else{
            type = RecipeContract.CONTENT_TYPE_SINGLE;
        }
        return type;

    }

    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, @Nullable ContentValues contentValues) {
        long id = 0;
        if(uri.equals(RECIPE_URI)) {
            id = dbhelper.getWritableDatabase().insert(DATABASE_RECIPE_NAME, null, contentValues);
        }else if(uri.equals(INGREDIENT_URI)){
            id = dbhelper.getWritableDatabase().insert(DATABASE_INGREDIENTS_NAME, null, contentValues);
        }else if(uri.equals(RECIPE_INGREDIENTS_URI)){
            id = dbhelper.getWritableDatabase().insert(DATABASE_RECIPE_INGREDIENTS_NAME, null, contentValues);
        }
        return Uri.parse(uri+ "/" + id);
    }

    @Override
    public int delete(@NonNull Uri uri, @Nullable String s, @Nullable String[] strings) {
        if(uri.equals(RECIPE_URI)) {
            return dbhelper.getWritableDatabase().delete(DATABASE_RECIPE_NAME, s, strings);
        }else if(uri.equals(INGREDIENT_URI)){
            return dbhelper.getWritableDatabase().delete(DATABASE_INGREDIENTS_NAME, s, strings);
        }else if(uri.equals(RECIPE_INGREDIENTS_URI)){
            return dbhelper.getWritableDatabase().delete(DATABASE_RECIPE_INGREDIENTS_NAME, s, strings);
        }
        return 0;
    }

    @Override
    public int update(@NonNull Uri uri, @Nullable ContentValues contentValues, @Nullable String s, @Nullable String[] strings) {
        if(uri.equals(RECIPE_URI)) {
            return dbhelper.getWritableDatabase().update(DATABASE_RECIPE_NAME, contentValues, s, strings);
        }else if(uri.equals(INGREDIENT_URI)){
            return dbhelper.getWritableDatabase().update(DATABASE_INGREDIENTS_NAME, contentValues, s, strings);
        }else if(uri.equals(RECIPE_INGREDIENTS_URI)){
            return dbhelper.getWritableDatabase().update(DATABASE_RECIPE_INGREDIENTS_NAME, contentValues, s, strings);
        }
        return 0;
    }
}
